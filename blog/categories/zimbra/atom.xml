<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zimbra, | Bitácora]]></title>
  <link href="http://mcoam.github.io/blog/categories/zimbra/atom.xml" rel="self"/>
  <link href="http://mcoam.github.io/"/>
  <updated>2015-12-17T17:16:13-03:00</updated>
  <id>http://mcoam.github.io/</id>
  <author>
    <name><![CDATA[Miguel Angel Coa Morales]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ansible: Configurando volúmen de datos HSM en Zimbra]]></title>
    <link href="http://mcoam.github.io/blog/2015/11/12/ansible-configurando-volumen-de-datos-hsm-en-zimbra/"/>
    <updated>2015-11-12T18:34:00-03:00</updated>
    <id>http://mcoam.github.io/blog/2015/11/12/ansible-configurando-volumen-de-datos-hsm-en-zimbra</id>
    <content type="html"><![CDATA[<p>El siguiente <code>Playbook</code> permite configurar un nuevo volúmen para datos (store) en un servidor Zimbra NE.</p>

<h2>```objc</h2>

<ul>
<li>hosts: ne_mailbox
remote_user: root
vars:
      zmvolume: &ldquo;/opt/zimbra/bin/zmvolume&rdquo;
      zmhsm: &ldquo;/opt/zimbra/bin/zmhsm&rdquo;
      zmprov: &ldquo;/opt/zimbra/bin/zmprov&rdquo;
      hsm_name: &ldquo;hsm02&rdquo;
      hsm_id: &ldquo;4&rdquo; # check id zmvolume -l |grep -B1 hsm02
      path: &ldquo;/opt/zimbra/store_hsm_02/&rdquo;
      policy_option: &ldquo; &lsquo;message,document,task,appointment,contact:before:-1month is:anywhere&rsquo; &rdquo;
tasks:

<pre><code>  - name: "Configura volumen HSM como volumen secundario"
    command: "{ { zmvolume } } -a -name  -c true -t secondaryMessage -p { { path } }"

  - name: "Activamos nuevo volumen para manejar data"
    command: "{ { zmvolume } } -sc -id { { hsm_id } } " 

  - name: "Configuramos politica HSM: Todo por sobre 1 mes se mueve al nuevo volumen"
    command: "{ { zmprov } } ms { { ansible_fqdn } } zimbraHsmPolicy { { policy_option } }"

  - name: "Arrancamos el proceso para mover correos al nuevo HSM"
    command: "{ { zmhsm } } -t"
</code></pre>

<p><code>``
&lt;b&gt;Donde:&lt;br&gt;&lt;/b&gt;
</code>path: &ldquo;/opt/zimbra/store_hsm_02/&rdquo;<code>: Corresponde al punto de montaje del nuevo recurso HSM.&lt;br&gt;
</code>hsm_id: 4"<code>: Corresponde al ID que le asigna Zimbra al nuevo volúmen (disco).&lt;br&gt;
</code>hsm_name: hsm02`: Corresponde al nombre que le colocamos al recurso HSM.<br></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Script para buscar y borrar un correo en zimbra]]></title>
    <link href="http://mcoam.github.io/blog/2015/01/15/script-para-buscar-y-borrar-un-correo-en-zimbra/"/>
    <updated>2015-01-15T12:49:00-03:00</updated>
    <id>http://mcoam.github.io/blog/2015/01/15/script-para-buscar-y-borrar-un-correo-en-zimbra</id>
    <content type="html"><![CDATA[<p>El siguiente script permite buscar y borrar un correo mediante consola desde los mailbox de los usuarios.
```ruby</p>

<h1>!/bin/bash</h1>

<p>zimbraAccounts=&lsquo;/var/tmp/cuentas&rsquo;
zimbraCMD=&lsquo;/opt/zimbra/bin/zmmailbox&rsquo;
 for a in <code>cat $zimbraAccounts</code></p>

<pre><code>do
    #user=`$a`
    emailID=( $($zimbraCMD -z -m $a search "de haber superado debido a la alta tasa de correos spam" |grep conv |awk {'print $2'} |sed 's/-//g') )
    echo $user
    #echo ${emailID[1]}
        for i in "${emailID[@]}"
            do
                $zimbraCMD -z -m $a dm $i
        echo "cuenta: $a" &gt;&gt; /var/tmp/casillasConEmail
            done
done
</code></pre>

<p><code>
En la línea nº8 tenemos que cambiar el texto a buscar, y que corresponde a lo que esta dentro de comillas.
Para el caso, tenemos que tener las cuentas de correos en el archivo `/var/tmp/cuentas` que las podemos obtener con el comando:
</code>
zmprov -l gaa |egrep -vi &lsquo;spam|virus|galsyn|archiv&rsquo;| sort > /var/tmp/cuentas
<code>
Demás esta decir que lo realizado en el comando anterior se puede hacer dentro del mismo script sin tener que hacer esto de forma separada.  Una vez ejecutado el script, podremos ver la información de las cuentas en donde fue borrado el correo:
</code>
[zimbra@mail1 tmp]$ tail -f /var/tmp/casillasConEmail
cuenta: <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x61;&#x68;&#x69;&#100;&#x61;&#108;&#103;&#111;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;">&#97;&#104;&#105;&#x64;&#97;&#x6c;&#x67;&#111;&#64;&#101;&#120;&#x61;&#x6d;&#112;&#x6c;&#x65;&#46;&#99;&#x6f;&#109;</a>
cuenta: <a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x61;&#108;&#105;&#110;&#97;&#x79;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#109;">&#97;&#x6c;&#105;&#110;&#97;&#x79;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#x6f;&#109;</a>
cuenta: <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x63;&#104;&#101;&#114;&#110;&#97;&#110;&#x64;&#x65;&#x7a;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;">&#x63;&#x68;&#101;&#x72;&#110;&#x61;&#x6e;&#x64;&#x65;&#122;&#x40;&#101;&#120;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>
cuenta: <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#58;&#99;&#117;&#x72;&#x72;&#117;&#x74;&#x69;&#x61;&#64;&#x65;&#x78;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#x6d;">&#99;&#117;&#114;&#x72;&#x75;&#x74;&#105;&#x61;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#109;</a>
cuenta: <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x63;&#118;&#97;&#108;&#100;&#101;&#115;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;">&#99;&#118;&#x61;&#108;&#100;&#101;&#115;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;</a>
cuenta: <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#101;&#118;&#97;&#108;&#x65;&#110;&#99;&#x69;&#97;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#x6d;">&#101;&#118;&#97;&#108;&#101;&#x6e;&#x63;&#105;&#97;&#64;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;</a>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reenviar un correo en zimbra basado en el Subject]]></title>
    <link href="http://mcoam.github.io/blog/2014/03/21/reenviar-un-correo-en-zimbra-basado-en-el-subject/"/>
    <updated>2014-03-21T14:10:00-03:00</updated>
    <id>http://mcoam.github.io/blog/2014/03/21/reenviar-un-correo-en-zimbra-basado-en-el-subject</id>
    <content type="html"><![CDATA[<p>Para reenviar un que contenga un <i>Subject</i> en particular hacia otra casilla en Zimbra podemos realizar los siguiente</p>

<p>En el archivo de configuración de postfix <i>/opt/zimbra/postfix/conf/main.cf.default</i> colocamos la referencia al hash para header_checks
<code>objc
header_checks = regexp:/opt/zimbra/postfix/conf/header_checks
</code>
Dependiendo de la versión de Zimbra, la anterior configuración funcionará sin problemas, de lo contrario la configuración referente al header_checks tenemos que hacerla en el archivo <i>/opt/zimbra/postfix/conf/zmmta.cf</i> donde adicionaremos la siguiente línea (antes del parámetro RESTART mta)
<code>objc
POSTCONF header_checks  regexp:/opt/zimbra/postfix/conf/header_checks
</code>
En el archivo  <i>/opt/zimbra/postfix/conf/header_checks</i> adicionamos la expresión regular que tendrá el subject</p>

<p><code>objc
/^Subject: MIGUELCOA/ REDIRECT mcoa@example.com
</code>
Recargarmos el servicio MTA
<code>objc
zmmtactl reload
</code>
Y desde ahora, cada vez que desde el servidor zimbra salga un correo que en su asunto contenga &ldquo;MIGUELCOA&rdquo; será enviada una copia hacia la casilla mcoa\@example.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrando usuarios/password Postfix to Zimbra]]></title>
    <link href="http://mcoam.github.io/blog/2014/01/15/migrando-usuarios-slash-password-postfix-to-zimbra/"/>
    <updated>2014-01-15T09:58:00-03:00</updated>
    <id>http://mcoam.github.io/blog/2014/01/15/migrando-usuarios-slash-password-postfix-to-zimbra</id>
    <content type="html"><![CDATA[<p>La idea del siguiente script es; primero crear la cuenta con una password temporal y luego configurar la password original del usuario, ambos valores son sacados del <i>/etc/shadow</i></p>

<p>``` python</p>

<h1>!/usr/bin/python</h1>

<h2>Miguel Coa M.</h2>

<p>import csv
with open (&lsquo;shadow&rsquo;, &lsquo;rb&rsquo;) as f:</p>

<pre><code>    reader = csv.reader (f, delimiter=':' ) 
    for row in reader:

            user     = row [0]
            passwd   = "'crypt{" + row [1] +"}'"

            print "ca {}@domain.com tmpPSW".format(user)
            print "ma {}@domain.com userPassword  {}  ".format(user,passwd)
</code></pre>

<p>```</p>

<p>Y como resultado nos arrojará por pantalla</p>

<p><code>python
ca varaya@domain.com tmpPSW
ma varaya@domain.com userPassword  'crypt{$1$6RT62jZZ$sFlv.MIII4PuKISBaap030}'
ca cgalaz@domain.com tmpPSW
ma cgalaz@domain.com userPassword  'crypt{$1$bAEOlC0N$4t.3zCGDb.RFc0vmxd2UB0}'
ca ctagle@domain.com tmpPSW
ma ctagle@domain.com userPassword  'crypt{$1$L7vlV7Me$orB2TCnqn.JeoVQpKsr6P0}'
</code>
Valor que los podemos almacenar en un archivo y los ejecutamos pasandolo como parámetro al comando <i>zmprov</i>. Si ya tenemos creadas las cuentas podemos comentar el primer print, para que solo las modifique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creando cuentas Zimbra desde un CSV]]></title>
    <link href="http://mcoam.github.io/blog/2014/01/14/creando-cuentas-zimbra-desde-un-csv/"/>
    <updated>2014-01-14T17:38:00-03:00</updated>
    <id>http://mcoam.github.io/blog/2014/01/14/creando-cuentas-zimbra-desde-un-csv</id>
    <content type="html"><![CDATA[<p>El siguiente script nos permite crear las cuentas en Zimbra desde un CSV y automatizar el proceso. El CSV en donde tenemos las cuentas, tiene el siguiente formato:</p>

<p><code>objc
cponce@example.com;Claudia;Ponce;TMPpasswd
cquintana@example.com;Cristofer;Quintana;TMPpasswd
ctello@example.com;Cristian;Tello;TMPpasswd
eperalta@example.com;Edgar;Peralta;TMPpasswd
</code></p>

<p>Y el script</p>

<p>``` objc</p>

<h1>!/usr/bin/python</h1>

<p>import csv
with open (&lsquo;Europarts.csv&rsquo;, &lsquo;rb&rsquo;) as f:</p>

<pre><code>    reader = csv.reader (f, delimiter=';' ) #delimiter tabulador \t
    for row in reader:

            mail     = row [0]
            name     = row [1]
            lastname = row [2]
            name2    = row [1] + ' ' + row [2]
    passwd   = row [3]

    print "ca {0} '{1}' displayName '{2}' sn '{3}' cn '{4}'".format(mail,passwd,name2.title(),lastname.title(),name2.title())
</code></pre>

<p>```</p>

<p>Lo anterior, imprimerá por pantalla lo siguiente:</p>

<p><code>
ca cponce@example.com 'TMPpasswd' displayName 'Claudia Ponce' sn 'Ponce' cn 'Claudia Ponce'
ca cquintana@example.com 'TMPpasswd' displayName 'Cristofer Quintana' sn 'Quintana' cn 'Cristofer Quintana'
ca ctello@example.com 'TMPpasswd' displayName 'Cristian Tello' sn 'Tello' cn 'Cristian Tello'
ca eperalta@example.com 'TMPpasswd' displayName 'Edgar Peralta' sn 'Peralta' cn 'Edgar Peralta'
</code></p>

<p>La salida se puede mandar de forma directa dentro del script hacia un archivo y luego pasarlo por parametro al comando zmprov</p>

<p><code>
zmprov &lt; zmCreateAccounts
</code></p>
]]></content>
  </entry>
  
</feed>
